using System;
using System.Linq;
using System.Collections.Generic;
using EdFi.Ods.Api.Models;
using EdFi.Ods.Common;
using EdFi.Ods.Common.Extensions;
using EdFi.Ods.Common.Models;
#pragma warning disable 108,114

namespace {{EntitiesBaseNamespace}}
{ 
{{#Interfaces}}

    /// <summary>
    /// Defines available properties and methods for the abstraction of the {{ModelName}} model.
    /// </summary>
    public interface I{{ModelName}}{{ImplementedInterfaces}}
    {
        // Primary Key properties
    {{#ParentClassName}}
        [NaturalKeyMember]
        {{ParentInterfaceName}} {{ParentClassName}} { get; set; }
    {{/ParentClassName}}
    {{#IdentifyingProperties}}
        [NaturalKeyMember]{{#IsServerAssigned}}[AutoIncrement]{{/IsServerAssigned}}{{#IsUniqueId}}[UniqueId]{{/IsUniqueId}}
        {{#IsLookup}}
        string {{LookupName}} { get; set; }
        {{/IsLookup}}
        {{^IsLookup}}
        {{CSharpType}} {{CSharpSafePropertyName}} { get; set; }
        {{/IsLookup}}
    {{/IdentifyingProperties}}

        // Non-PK properties
    {{#NonIdentifyingProperties}}
        {{#IsLookup}}
        string {{LookupName}} { get; set; }
        {{/IsLookup}}
        {{^IsLookup}}
        {{CSharpType}} {{CSharpSafePropertyName}} { get; set; }
        {{/IsLookup}}
    {{/NonIdentifyingProperties}}

        // One-to-one relationships
    {{#HasNavigableOneToOnes}}
        {{#NavigableOneToOnes}}

        I{{ItemTypeName}} {{PropertyName}} { get; set; }
        {{/NavigableOneToOnes}}
    {{/HasNavigableOneToOnes}}

        // Lists
    {{#Lists}}
        ICollection<I{{ItemTypeName}}> {{PropertyName}} { get; set; }
    {{/Lists}}

        // Resource reference data
    {{#AggregateReferences}}
        Guid? {{AggregateReferenceName}}ResourceId { get; set; }
        {{#MappedReferenceDataHasDiscriminator}}
        string {{AggregateReferenceName}}Discriminator { get; set; }
        {{/MappedReferenceDataHasDiscriminator}}
    {{/AggregateReferences}}
    }
    
    // Synchronization context
    /// <summary>
    /// Defines properties that indicate whether a particular property of the model abstraction
    /// is supported by a model implementation being used as the source in a "synchronization"
    /// operation.
    /// </summary>
    public class {{ModelName}}SynchronizationContext{{#IsExtendable}} : IExtensionsSynchronizationContext{{/IsExtendable}}
    {
        public {{ModelName}}SynchronizationContext(
    {{#SynchronizationContextMembers}}
       {{^ItemTypeName}}
            bool is{{PropertyName}}Supported{{^IsLast}},{{/IsLast}}
       {{/ItemTypeName}}
       {{#ItemTypeName}}
            Func<I{{ItemTypeName}}, bool> is{{ItemTypeName}}Included{{^IsLast}},{{/IsLast}}
       {{/ItemTypeName}}
    {{/SynchronizationContextMembers}}
    {{#IsExtendable}}
            IReadOnlyList<string> supportedExtensions
    {{/IsExtendable}}
            )
        {
    {{#SynchronizationContextMembers}}
        {{^ItemTypeName}}
            Is{{PropertyName}}Supported = is{{PropertyName}}Supported;
        {{/ItemTypeName}}
        {{#ItemTypeName}}
            Is{{ItemTypeName}}Included = is{{ItemTypeName}}Included;
        {{/ItemTypeName}}
    {{/SynchronizationContextMembers}}
    {{#IsExtendable}}
            SupportedExtensions = supportedExtensions;
    {{/IsExtendable}}
        }
    
    {{#SynchronizationContextMembers}}
        {{^ItemTypeName}}
        public bool Is{{PropertyName}}Supported { get; }
        {{/ItemTypeName}}
        {{#ItemTypeName}}
        public Func<I{{ItemTypeName}}, bool> Is{{ItemTypeName}}Included { get; }
        {{/ItemTypeName}}
    {{/SynchronizationContextMembers}}
    {{#IsExtendable}}
        public IReadOnlyList<string> SupportedExtensions { get; }
        
        public bool IsExtensionSupported(string name)
        {
            return SupportedExtensions.Contains(name);    
        }
    {{/IsExtendable}}
    }
{{/Interfaces}}
}